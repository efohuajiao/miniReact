(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.client = global.client || {}, global.client.js = factory()));
})(this, (function () { 'use strict';

  const FunctionComponent = 0;
  const HostRoot = 3;
  const HostComponent = 5;
  const HostText = 6;

  const NoFlags = 0b0000001;
  const Placement = 0b0000010;
  const Update = 0b0000100;
  const ChldDeletion = 0b0001000;
  const MutationMask = Placement | Update | ChldDeletion;

  class FiberNode {
      constructor(tag, pendingProps, key) {
          this.tag = tag;
          this.key = key;
          this.stateNode = null;
          this.type = null;
          this.return = null;
          this.sibling = null;
          this.child = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.memoizedState = null;
          this.alternate = null;
          this.updateQueue = null;
          this.flags = NoFlags;
          this.subTreeFlags = NoFlags;
      }
  }
  class FiberRootNode {
      constructor(container, hostRootFiber) {
          this.container = container;
          this.current = hostRootFiber;
          hostRootFiber.stateNode = this;
          this.finishedWork = null;
      }
  }
  const createWorkInProgress = (current, pendingProps) => {
      let wip = current.alternate;
      if (wip === null) {
          wip = new FiberNode(current.tag, pendingProps, current.key);
          wip.stateNode = current.stateNode;
          wip.alternate = current.alternate;
          current.alternate = wip;
      }
      else {
          wip.pendingProps = pendingProps;
          wip.flags = NoFlags;
          wip.subTreeFlags = NoFlags;
      }
      wip.type = current.type;
      wip.updateQueue = current.updateQueue;
      wip.child = current.child;
      wip.memoizedProps = current.memoizedProps;
      wip.memoizedState = current.memoizedState;
      return wip;
  };
  function createFiberFromElement(element) {
      const { type, key, props } = element;
      let fiberTag = FunctionComponent;
      if (typeof type === 'string') {
          fiberTag = HostComponent;
      }
      else if (typeof type !== 'function' && true) {
          console.warn('未定义的type类型', element);
      }
      const fiber = new FiberNode(fiberTag, props, key);
      fiber.type = type;
      return fiber;
  }

  const createUpdate = (action) => {
      return {
          action
      };
  };
  const createUpdateQueue = () => {
      return {
          shared: {
              pending: null
          }
      };
  };
  const enqueueUpdate = (updateQueue, update) => {
      updateQueue.shared.pending = update;
  };
  const processUpdateQueue = (baseState, pendingUpdate) => {
      const result = { memoizedState: baseState };
      if (pendingUpdate !== null) {
          const action = pendingUpdate.action;
          if (action instanceof Function) {
              result.memoizedState = action(baseState);
          }
          else {
              result.memoizedState = baseState;
          }
      }
      return result;
  };

  const supportSymbol = typeof Symbol === 'function' && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol ? Symbol.for('react.element') : 0xeac7;

  function ChildReconciler(shouldTrackEffects) {
      return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
          function reconcileSingleElement(returnFiber, currentFiber, element) {
              const fiber = createFiberFromElement(element);
              fiber.return = returnFiber;
              return fiber;
          }
          function reconcileSingleTextNode(returnFiber, currentFiber, content) {
              const fiber = new FiberNode(HostText, { content }, null);
              fiber.return = returnFiber;
              return fiber;
          }
          function placeSingleChild(fiber) {
              if (shouldTrackEffects && fiber.alternate === null) {
                  fiber.flags |= Placement;
              }
              return fiber;
          }
          if (typeof newChild === 'object' && newChild !== null) {
              switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                      return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
                  default:
                      {
                          console.warn('为实现的reconcile类型', newChild);
                      }
              }
          }
          if (typeof newChild === 'string' || typeof newChild === 'number') {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
          }
          {
              console.warn('为实现的reconcile类型', newChild);
          }
          return null;
      };
  }
  const reconcileChildFibers = ChildReconciler(true);
  const mountChildFibers = ChildReconciler(false);

  const beginWork = (wip) => {
      switch (wip.tag) {
          case HostRoot:
              return updateHostRoot(wip);
          case HostComponent:
              return updateHostComponent(wip);
          case HostText:
              return null;
          default:
              {
                  console.warn('beginWork为实现的类型');
              }
              return null;
      }
  };
  function updateHostRoot(wip) {
      const baseState = wip.memoizedState;
      const updateQueue = wip.updateQueue;
      const pending = updateQueue.shared.pending;
      updateQueue.shared.pending = null;
      const { memoizedState } = processUpdateQueue(baseState, pending);
      wip.memoizedState = memoizedState;
      const nextChildren = wip.memoizedState;
      reconcileChildren(wip, nextChildren);
      return wip.child;
  }
  function updateHostComponent(wip) {
      const nextProps = wip.pendingProps;
      const nextChildren = nextProps.children;
      reconcileChildren(wip, nextChildren);
      return wip.child;
  }
  function reconcileChildren(wip, chilren) {
      const current = wip.alternate;
      if (current !== null) {
          wip.child = reconcileChildFibers(wip, current?.child, chilren);
      }
      else {
          wip.child = mountChildFibers(wip, null, chilren);
      }
  }

  const createInstance = (type, props) => {
      const element = document.createElement(type);
      return element;
  };
  const appendInitialChild = (parent, child) => {
      parent.append(child);
  };
  const createTextInstance = (content) => {
      return document.createTextNode(content);
  };
  const appendChildToContainer = appendInitialChild;

  let nextEffect = null;
  const commitMutationEffect = (finishedWork) => {
      nextEffect = finishedWork;
      while (nextEffect !== null) {
          const child = nextEffect.child;
          if ((nextEffect.subTreeFlags & MutationMask) !== NoFlags && child !== null) {
              nextEffect = child;
          }
          else {
              up: while (nextEffect !== null) {
                  commitMutationEffectsOnFiber(nextEffect);
                  const sibling = nextEffect.sibling;
                  if (sibling !== null) {
                      nextEffect = sibling;
                      break up;
                  }
              }
              nextEffect = nextEffect.return;
          }
      }
  };
  const commitMutationEffectsOnFiber = (finishedWork) => {
      const flags = finishedWork.flags;
      if ((flags & Placement) !== NoFlags) {
          commitPlacement(finishedWork);
          finishedWork.flags &= ~Placement;
      }
  };
  const commitPlacement = (finishedWork) => {
      {
          console.warn('执行Plaecment操作', finishedWork);
      }
      const hostParent = getHostParent(finishedWork);
      appendPalcementNodeIntoContainer(finishedWork, hostParent);
  };
  function getHostParent(fiber) {
      let parent = fiber.return;
      while (parent) {
          const parentTag = parent.tag;
          if (parentTag === HostComponent) {
              return parent.stateNode;
          }
          if (parentTag === HostRoot) {
              return parent.stateNode.container;
          }
          parent = parent.return;
      }
      {
          console.warn('未找到父节点');
      }
  }
  function appendPalcementNodeIntoContainer(finishedWork, hostParent) {
      if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
          appendChildToContainer(hostParent, finishedWork.stateNode);
          return;
      }
      let child = finishedWork.child;
      if (child !== null) {
          appendChildToContainer(hostParent, finishedWork.stateNode);
          let sibling = child.sibling;
          while (sibling !== null) {
              appendChildToContainer(hostParent, finishedWork.stateNode);
              sibling = sibling.sibling;
          }
      }
  }

  const completeWork = (wip) => {
      const newProps = wip.pendingProps;
      const current = wip.alternate;
      switch (wip.tag) {
          case HostComponent:
              if (current !== null && wip.stateNode) ;
              else {
                  const instace = createInstance(wip.type);
                  appendAllChildren(instace, wip);
                  wip.stateNode = instace;
              }
              bubleProperties(wip);
              return null;
          case HostText:
              const instace = createTextInstance(newProps.content);
              wip.stateNode = instace;
              bubleProperties(wip);
              return null;
          case HostRoot:
              bubleProperties(wip);
              return null;
          default:
              {
                  console.warn('未处理的completeWork情况', wip);
              }
      }
  };
  function appendAllChildren(parent, wip) {
      let node = wip.child;
      while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node?.stateNode);
          }
          else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
          }
          if (node === wip) {
              return;
          }
          while (node.sibling === null) {
              if (node.return === null || node.return === wip) {
                  return;
              }
              node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
      }
  }
  function bubleProperties(wip) {
      let subtreeFlags = NoFlags;
      let child = wip.child;
      while (child !== null) {
          subtreeFlags |= child.subTreeFlags;
          subtreeFlags |= child.flags;
          child.return = wip;
          child = child.sibling;
      }
      wip.subTreeFlags |= subtreeFlags;
  }

  let workInProgress = null;
  function prepareFreshStack(root) {
      workInProgress = createWorkInProgress(root.current, {});
  }
  function scheduleUpdateOnFiber(fiber) {
      const root = markUpdateFromFiberToRoot(fiber);
      renderRoot(root);
  }
  function markUpdateFromFiberToRoot(fiber) {
      let node = fiber;
      let parent = node.return;
      while (parent !== null) {
          node = parent;
          parent = node.return;
      }
      if (node.tag === HostRoot) {
          return node.stateNode;
      }
      return null;
  }
  function renderRoot(root) {
      prepareFreshStack(root);
      do {
          try {
              workLoop();
              break;
          }
          catch (e) {
              {
                  console.error('workLoop发生错误', e);
              }
              workInProgress = null;
          }
      } while (true);
      const finishedWork = root.current.alternate;
      root.finishedWork = finishedWork;
      commitRoot(root);
  }
  function commitRoot(root) {
      const finishedWork = root.finishedWork;
      if (finishedWork === null) {
          return;
      }
      {
          console.warn('commit阶段开始', finishedWork);
      }
      root.finishedWork = null;
      const subtreeHasEffect = (finishedWork.subTreeFlags & MutationMask) != NoFlags;
      const rootHasEffect = (finishedWork.flags | MutationMask) != NoFlags;
      if (subtreeHasEffect || rootHasEffect) {
          root.current = finishedWork;
          commitMutationEffect(finishedWork);
      }
      else {
          root.current = finishedWork;
      }
  }
  function workLoop() {
      while (workInProgress !== null) {
          performUnitOfWork(workInProgress);
      }
  }
  function performUnitOfWork(fiber) {
      const next = beginWork(fiber);
      fiber.memoizedProps = fiber.pendingProps;
      if (next === null) {
          completeUnitOfWork(fiber);
      }
      else {
          workInProgress = next;
      }
  }
  function completeUnitOfWork(fiber) {
      let node = fiber;
      do {
          completeWork(node);
          const sibling = node.sibling;
          if (sibling !== null) {
              workInProgress = sibling;
              return;
          }
          node = node.return;
          workInProgress = node;
      } while (node !== null);
  }

  function createContaienr(container) {
      const hostRootFiber = new FiberNode(HostRoot, {}, null);
      const root = new FiberRootNode(container, hostRootFiber);
      hostRootFiber.updateQueue = createUpdateQueue();
      return root;
  }
  function updateContainer(element, root) {
      const hostRootFiber = root.current;
      const update = createUpdate(element);
      enqueueUpdate(hostRootFiber.updateQueue, update);
      scheduleUpdateOnFiber(hostRootFiber);
      return element;
  }

  function createRoot(container) {
      const root = createContaienr(container);
      return {
          render(element) {
              updateContainer(element, root);
          }
      };
  }

  var ReactDom = /*#__PURE__*/Object.freeze({
    __proto__: null,
    createRoot: createRoot
  });

  return ReactDom;

}));
