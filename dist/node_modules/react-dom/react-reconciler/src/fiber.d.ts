import { Key, Props, ReactElementType, Ref } from 'packages/shared/ReactTypes';
import { WorkTag } from './workTags';
import { Flags } from './fiberFlags';
import { Container } from 'hostConfig';
export declare class FiberNode {
    type: any;
    tag: WorkTag;
    pendingProps: Props;
    key: Key;
    stateNode: any;
    ref: Ref;
    return: FiberNode | null;
    sibling: FiberNode | null;
    child: FiberNode | null;
    index: number;
    memoizedProps: Props | null;
    memoizedState: any;
    alternate: FiberNode | null;
    flags: Flags;
    subTreeFlags: Flags;
    updateQueue: unknown;
    constructor(tag: WorkTag, pendingProps: Props, key: Key);
}
export declare class FiberRootNode {
    container: Container;
    current: FiberNode;
    finishedWork: FiberNode | null;
    constructor(container: Container, hostRootFiber: FiberNode);
}
export declare const createWorkInProgress: (current: FiberNode, pendingProps: Props) => FiberNode;
export declare function createFiberFromElement(element: ReactElementType): FiberNode;
